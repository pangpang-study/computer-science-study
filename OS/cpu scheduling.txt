Cpu Scheduling
메모리에 있는 프로세스 중에서 어떤 프로세스에게 cpu를 할당할지를 정하는 개념이다

목적 - 
cpu 이용률을 높이기 위해(cpu를 바쁘게)
throughput을 높이기 위해(시간당 프로세스 완료 수를 최대한으로)
waiting time을 최소화 시키자(ready queue에 프로세스가 있는시간을 최소화) - 중요
responding time을 최소화(ui같은 반응시간을 줄이자)

cpu burst 
running cpu bount time

io burst 
io bound time

ready 상태의 프로세스들에게...
FIFO Queue, Priority Queue를 이용해서 구현이 가능!

우선순위를 어떻게 부여할까?
Preemptive 자발적 - 중간에 바뀔 수 있음
non-Preemptive 비 자발적 - 끝날때까지 기다림

프로세스의 동작과정에서
running -> waiting, terminate
둘다 non - preemptive
running -> ready, waiting -> ready
Preemptive, non-Preemptive 둘다 가능하다

dispatcher란?
context switch가 일어나게 해주는것
scheduler안에 포함되어있다고 생각하자
context를 user mode로 프로세스를 바꿔줌

dispatch latency - 가급적 짧아야함(프로세스가 멈추고 다른 새로운 프로세스가 시작하는 지연시간)

Scheduling 기법들
wait time -> 프로세스가 실행될때까지 걸린시간
turnaround time -> 프로세스가 끝날때까지 걸린 시간

Fcfs - 먼저 요청한 process를 실행
Shortest Job First(Shortest Remaining Time First) - 일의 시간이 짧은놈부터
Shortest remaining time first - 도착시간을 고려, 남은시간이 짧은놈을 먼저 실행 더 SJF보다 이상적
Round Robin - circular queue를 이용해 ready queue를 구현한다(time quantum을 정해서 시간이 지나면 context-switch)
Priority based -> starvation의 문제가 생김(장시간 ready queue에서 대기만함..) -> aging을 통해서 극복
MLQ(Multi Level Queue) - 실제로 현재 쓰이는 방식

user thread
kernal thread -> 운영체제는 얘만 scheduling 하면됨